stages:
  - test
  - build
  - deploy
  - stop_deploy

services:
  - docker:dind

syntax_check:
  stage: test
  image: php:7.4-cli-alpine
  script:
    - find . -name "*.php" -print0 | xargs -0 -n1 php -l
    - grep -r --exclude-dir="vendor" --exclude="*.md" --exclude=".git*" "password" .
  allow_failure: true
  tags:
    - shell

install application packages:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - ls -l
    - cat index.php
    - sudo ssh-keygen -f "/root/.ssh/known_hosts" -R "[192.168.1.44]:2222"
    - sudo sshpass -p 'vagrant' ssh-copy-id -o "StrictHostKeyChecking=no" -i /home/user/.ssh/id_rsa.pub -p 2222 vagrant@192.168.1.44
    - sudo ansible-playbook playbook.yml -i inventaire.yml --tags "package"
  only:
    - feat/add_vagrant
  tags:
    - shell

build application:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - ls -l
    - pwd
    - echo $CI_REGISTRY_USER
    - echo $DEPLOY_TOKEN
    - echo $CI_REGISTRY
    - sudo ansible-playbook playbook.yml -i inventaire.yml --tags "build" --extra-vars "CI_REGISTRY=$CI_REGISTRY CI_REGISTRY_USER=$CI_REGISTRY_USER CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE CI_COMMIT_SHA=$CI_COMMIT_SHA DEPLOY_TOKEN=$DEPLOY_TOKEN IMAGE_NAME=$IMAGE_NAME"
  only:
    - feat/add_vagrant
  needs:
    - install application packages
  tags:
    - shell

deploy application:
  stage: deploy
  script:
    - sudo ansible-playbook playbook.yml -i inventaire.yml --tags "deployment"
  only:
    - feat/add_vagrant
  tags:
    - shell

stop application deployment:
  stage: stop_deploy
  script:
    - sudo ansible-playbook playbook.yml -i inventaire.yml --tags "stop" --extra-vars "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE CI_COMMIT_SHA=$CI_COMMIT_SHA IMAGE_NAME=$IMAGE_NAME"
  only:
    - feat/add_vagrant
  when: manual
  tags:
    - shell

