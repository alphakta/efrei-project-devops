stages:
  - build
  - deploy
  - stop_deploy

services:
  - docker:dind

variables:
  IMAGE_NAME: beprimeur

# check_php_code:
#   stage: build
#   image: php:7.4-cli
#   script:
#     # Vérification de la qualité du code avec PHP CodeSniffer
#     - phpcs --standard=PSR2 ./controleurs/
#     - phpcs --standard=PSR2 ./modeles/
#     - phpcs --standard=PSR2 ./vues/
#     # Vérification de la présence de mots de passe en clair
#     - grep -rnw ./controleurs/ -e 'mot_de_passe' --color=auto
#     - grep -rnw ./modeles/ -e 'mot_de_passe' --color=auto
#     - grep -rnw ./vues/ -e 'mot_de_passe' --color=auto
#     # Vérification de la syntaxe des fichiers PHP avec PHP Lint
#     - find ./controleurs/ -type f -name "*.php" -print0 | xargs -0 -n1 -P4 php -l
#     - find ./modeles/ -type f -name "*.php" -print0 | xargs -0 -n1 -P4 php -l
#     - find ./vues/ -type f -name "*.php" -print0 | xargs -0 -n1 -P4 php -l
#   only:
#     - main
#   tags:
#     - shell

build application:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  # needs: [check_php_code]
  script:
    - sudo ansible-playbook build.yml --extra-vars "CI_REGISTRY=$CI_REGISTRY CI_REGISTRY_USER=$CI_REGISTRY_USER CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE CI_COMMIT_SHA=$CI_COMMIT_SHA DEPLOY_TOKEN=$DEPLOY_TOKEN IMAGE_NAME=$IMAGE_NAME"
  only:
    - main
  tags:
    - shell

deploy application:
  stage: deploy
  script:
    - sudo ansible-playbook deploy.yml
  only:
    - main
  tags:
    - shell

stop application deployment:
  stage: stop_deploy
  script:
    - sudo ansible-playbook stop_deploy.yml --extra-vars "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE CI_COMMIT_SHA=$CI_COMMIT_SHA IMAGE_NAME=$IMAGE_NAME"
  only:
    - main
  when: manual
  tags:
    - shell

